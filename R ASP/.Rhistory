+INdm[24:225,2]
+INdm[24:225,3]
+INdm[24:225,4]
+INdm[24:225,5]
+INdm[24:225,6]
+INdm[24:225,7]
+INdm[24:225,8]
+INdm[24:225,9]
+INdm[24:225,10]
+INdm[24:225,11]
+INdm[24:225,12]-1))
summary(res3)
plot(res3)
# Regression de : IO1_cjo[t]= ( alpha0 + alpha1*PIB_evol(t)+alpha2*Ratio_IPC(t)) * sum(i=1:12)(IN_cjo[t-i])
res4= lm(IO1d_cut~
(PIB_evol[36:237]+Ratio_IPC[36:237])*(IN_moy[24:225]))
summary(res4)
plot(res4)
# OBJETS TS + DECOMPOSITION
IO1d_cutts<-ts(IO1d_cut, start=c(1995, 1), end=c(2014, 9), frequency=12)
IN_moyts<-ts(IN_moy, start=c(1995, 1), end=c(2014, 9), frequency=12)
IO1d_cutdecomp<-decomp(IO1d_cutts)
# IO1d_cutdecomp$seasonal donne la partie saisonniÃ¨re sous forme de vecteur
# IO1d_cutdecomp$trend donne la tendance sous forme de vecteur
# IO1d_cutdecomp$random donne la partie alÃ©atoire sous forme de vecteur
IN_moydecomp<-decomp(IN_moyts)
res5= lm(IO1d_cutdecomp$trend~
(PIB_evol[36:237]+Ratio_IPC[36:237])*(IN_moydecomp$trend[24:225]))
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
INdecomp<-decompose(INts) # l'objet INdecomp contient alors la decomposition de IN
INdecomp<-decompose(INts, type='multiplicative', filter=NULL)
plot(INdecomp)
# veuillez installer le package xlsx, et activer les packages rJava, xlsxjars et xlsx dans cet ordre pour pouvoir importer les fichiers xlsx
library(rJava,xlsxjars)
library(xlsx)
# importation du fichier xls
path = getwd()
mydata = read.xlsx("C:\\Users\\lenovo\\Documents\\GitHub\\R-ASP\\R ASP\\donnees_mensuelles.xlsx",1)  # read from first sheet
# declaration des variables
PIB=mydata$PIB
PIB_evol=mydata$PIB_evol
IPC_VO=mydata$IPC_VO
IPC_VN=mydata$IPC_VN
Ratio_IPC=mydata$Ratio_IPC # Ratio_IPC = IPC_VO / IPC_VN
# CREATION DES OBJETS TIMESERIES
require(graphics)
INts<-ts(mydata$IN, start=c(1995, 1), end=c(2014, 9), frequency=12)
# REPRESENTATION DECOMPOSITION
plot(stl(INts,"per"))
# DECOMPOSITION EFFECTIVE
# la desaisonnalisation doit etre multiplicative, la saison haute affecte les ventes avec un facteur multiplicatif et non en additionnant
# un volume constant
# 09/04/15 (Mathieu) : Je ne suis pas franchement d'accord... on en parle demain
INdecomp<-decompose(INts) # l'objet INdecomp contient alors la decomposition de IN
INdecomp<-decompose(INts, type='multiplicative', filter=NULL)
plot(INdecomp)
# MATRICE DE REGRESSION
# creation d'une matrice dont les colonnes sont le vecteur IN_cjo decale de l'indice de colonne
# cette matrice prend en compte le coefficient de jours ouvres
createINd_cjo = function() {
m = matrix(c(rep(c(rep(0,237)),12)),nrow=237,byrow=TRUE)
for (j in 1:12) {
for(i in (j+1):237)
m[i,j]=mydata$IN_cjo[i-j]
}
INd_cjo = m[13:237,1:12] # on supprime les mois ou l'on a pas toutes les donnees a cause du decallage
return(INd_cjo)
}
INdm = createINd_cjo() # creation de la matrice
IO1d =  mydata$IO1_cjo[13:237]# decallage du vecteur pour avoir la bonne taille pour la regression
IO1d_cut = mydata$IO1_cjo[36:237]#dÃ©callage superieur pour fitter la rÃ©gression avec Ratio_IPC
# creation de la matrive vecteur colonne 1:1 pour obtenir le vecteur
M = matrix(1,12,1)
for (i in 1:12){
M[i,1]=1
}
IN_moy = INdm%*%M
# Il faut crÃ©er la matrice de regression en ne retenant que la trend de IN puis faire la rÃ©ression sur la trend
# test de la regression multilineaire de IO sur l'ensemble des IN : modele de base sans contraintes sur les coefficients
res1= lm(IO1d~INdm[1:225,1]+INdm[1:225,2]+INdm[1:225,3]+INdm[1:225,4]+INdm[1:225,5]+INdm[1:225,6]
+INdm[1:225,7]+INdm[1:225,8]+INdm[1:225,9]+INdm[1:225,10]+INdm[1:225,11]+INdm[1:225,12])
summary(res1)
plot(res1)
# Test du meme modele mais avec une contrainte de nullite sur la constante
res2= lm(IO1d~INdm[1:225,1]+INdm[1:225,2]+INdm[1:225,3]+INdm[1:225,4]+INdm[1:225,5]+INdm[1:225,6]
+INdm[1:225,7]+INdm[1:225,8]+INdm[1:225,9]+INdm[1:225,10]+INdm[1:225,11]+INdm[1:225,12]-1)
summary(res2)
plot(res2)
# IPCVN et IPCVO designent les indices de Prix a la consommation de l'INSEE : Indice Prix a la consommation Voiture Neuve/Occasion
# Plus d'information concernant ces indices et leur construction dans le pdf de methodologie de l'INSEE joint au dossier Git
# Le coefficient CJO_5J pondere en fonction du nombre de jours ouvres
# Regression de : IO1_cjo[t]= sum(i=1:12)( alpha(i)*IN_cjo[t-i]  )
# avec apha(i,t)= beta0(i)+beta1(i)*PIB_evol(t)+beta2*Ratio_IPC(t)
# ce modele rend compte de l'arbitrage du consommateur entre le prix des voitures neuves et celles d'occasion
# et de l'influence du context economique (PIB)
res3= lm(IO1d~
(1+PIB_evol[13:237]+Ratio_IPC[36:237])*(INdm[24:225,1]
+INdm[24:225,2]
+INdm[24:225,3]
+INdm[24:225,4]
+INdm[24:225,5]
+INdm[24:225,6]
+INdm[24:225,7]
+INdm[24:225,8]
+INdm[24:225,9]
+INdm[24:225,10]
+INdm[24:225,11]
+INdm[24:225,12]-1))
summary(res3)
plot(res3)
# Regression de : IO1_cjo[t]= ( alpha0 + alpha1*PIB_evol(t)+alpha2*Ratio_IPC(t)) * sum(i=1:12)(IN_cjo[t-i])
res4= lm(IO1d_cut~
(PIB_evol[36:237]+Ratio_IPC[36:237])*(IN_moy[24:225]))
summary(res4)
plot(res4)
# OBJETS TS + DECOMPOSITION
IO1d_cutts<-ts(IO1d_cut, start=c(1995, 1), end=c(2014, 9), frequency=12)
IN_moyts<-ts(IN_moy, start=c(1995, 1), end=c(2014, 9), frequency=12)
IO1d_cutdecomp<-decomp(IO1d_cutts)
# IO1d_cutdecomp$seasonal donne la partie saisonniÃ¨re sous forme de vecteur
# IO1d_cutdecomp$trend donne la tendance sous forme de vecteur
# IO1d_cutdecomp$random donne la partie alÃ©atoire sous forme de vecteur
IN_moydecomp<-decomp(IN_moyts)
INmoydecomp_trend<-moydecomp$trend
res5= lm(IO1d_cutdecomp$trend~
(PIB_evol[36:237]+Ratio_IPC[36:237])*(IN_moydecomp$trend[24:225]))
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
IO1d_cutdecomp<-decomp(IO1d_cutts)
INmoydecomp_trend<-IN_moyts$trend
IN_moydecomp<-decompose(IN_moyts)
INmoydecomp_trend<-IN_moydecomp$trend
res5= lm(IO1d_cutdecomp$trend~
(PIB_evol[36:237]+Ratio_IPC[36:237])*(IN_moydecomp$trend[24:225]))
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
res5= lm(IO1d_cutdecomp_trend~
(PIB_evol[36:237]+Ratio_IPC[36:237])*(IN_moydecomp_trend[24:225]))
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
IO1d_cutdecomp<-decompose(IO1d_cutts)
IO1d_cutdecomp_trend<-IO1d_cutdecomp$trend
IN_moydecomp<-decompose(IN_moyts)
INmoydecomp_trend<-IN_moydecomp$trend
res5= lm(IO1d_cutdecomp_trend~
(PIB_evol[36:237]+Ratio_IPC[36:237])*(IN_moydecomp_trend[24:225]))
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
IO1d_cutdecomp<-decompose(IO1d_cutts)
IO1d_cutdecomp_trend<-IO1d_cutdecomp$trend
IN_moydecomp<-decompose(IN_moyts)
IN_moydecomp_trend<-IN_moydecomp$trend
res5= lm(IO1d_cutdecomp_trend~
(PIB_evol[36:237]+Ratio_IPC[36:237])*(IN_moydecomp_trend[24:225]))
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
res5= lm(IO1d_cutdecomp_trend~
(Ratio_IPC[36:237])*(IN_moydecomp_trend[24:225]))
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
IO1dts<-ts(IO1d, start=c(1996, 1), end=c(2014, 9), frequency=12)
IN_moyts<-ts(IN_moy, start=c(1995, 1), end=c(2014, 9), frequency=12)
IO1d_decomp<-decompose(IO1dts)
IO1d_decomp_trend<-IO1d_decomp$trend
IN_moydecomp<-decompose(IN_moyts)
IN_moydecomp_trend<-IN_moydecomp$trend
res5= lm(IO1d_decomp_trend[36:237]~
(Ratio_IPC[36:237])*(IN_moydecomp_trend[24:225]))
summary(res5)
plot(res5)
summary(res5)
plot(res5)
summary(res5)
plot(res5)
# Ce fichier contient les fonctions générales utilisées dans les differents modeles
# MATRICE DE REGRESSION
# creation d'une matrice dont les colonnes sont le vecteur entre en imput decale de l'indice de colonne
create_mat = function(var) {
m = matrix(c(rep(c(rep(0,237)),12)),nrow=237,byrow=TRUE)
for (j in 1:12) {
for(i in (j+1):237)
m[i,j]=var[i-j]
}
res = m[13:237,1:12] # on supprime les mois ou l'on a pas toutes les donnees à cause du decallage
return(res)
}
# Ce fichier se charge d'importer les données utilisées à partir d'un fichier excel
# veuillez installer le package xlsx, et activer les packages rJava, xlsxjars et xlsx dans cet ordre pour pouvoir importer les fichiers xlsx
library(rJava,xlsxjars)
library(xlsx)
# importation du fichier xls
path = getwd()
mydata = read.xlsx("C:/Users/Loïc/Documents/GitHub/R-ASP/R ASP/donnees_mensuelles.xlsx",1)  # read from first sheet
# Ce fichier se charge de la désaisonalisation des séries
source("import_files.r")
# CREATION DES OBJETS TIMESERIES
require(graphics)
INts<-ts(mydata$IN, start=c(1995, 1), end=c(2014, 9), frequency=12)
IO1 = mydata$IO1[13:237]
IO1ts<-ts(IO1, start=c(1996, 1), end=c(2014, 9), frequency=12)
# REPRESENTATION DECOMPOSITION
plot(stl(INts,"per"))
# DECOMPOSITION EFFECTIVE
# Méthode multiplicative et additive
IN_decomp_add<-decompose(INts, type="additive")
IN_decomp_mult<-decompose(INts, type="multiplicative")
plot(IN_decomp_add)
plot(IN_decomp_mult)
# Le choix de la meilleure désaisonalisation est encore en débat, pour l'heure les deux sont conservées
# Le plot des différentes décomposition ne permet pas de conclure facilement
IO1_decomp_add<-decompose(IO1ts, type="additive")
IO1_decomp_mult<-decompose(IO1ts, type="multiplicative")
plot(IO1_decomp_add)
plot(IO1_decomp_mult)
# Création des variables désaisonnalisées
INt = IN_decomp_mult$trend
INs = IN_decomp_mult$seasonal
IO1t = IO1_decomp_mult$trend
IO1s = IO1_decomp_mult$seasonal
# Une fois la desaisonnalisation faite, il faut multiplier par les CJO
INt_cjo = INt/mydata$X.CJO_5J[1:237]
INs_cjo = INs/mydata$X.CJO_5J[1:237]
IO1t_cjo = IO1t/mydata$X.CJO_5J[13:237]
IO1s_cjo = IO1s/mydata$X.CJO_5J[13:237]
# Modele avec IPC et Conso
# Nettoyage de l'environement de travail
rm(list=ls())
#Importation des fichiers R nécéssaires
source("desaisonnalisation.r")
source("basic_functions.R")
# declaration des variables
Ratio_IPC=mydata$Ratio_IPC # Ratio_IPC = IPC_VO / IPC_VN
PIB_evol=mydata$PIB_evol
# creation de l a matrice de regression
IN_mat = create_mat(INt_cjo)
# IPCVN et IPCVO designent les indices de Prix a la consommation de l'INSEE : Indice Prix a la consommation Voiture Neuve/Occasion
# Plus d'information concernant ces indices et leur construction dans le pdf de methodologie de l'INSEE joint au dossier Git
# Le coefficient CJO_5J pondere en fonction du nombre de jours ouvres
# Regression de : IO1_cjo[t]= sum(i=1:12)( alpha(i)*IN_cjo[t-i]  )
# avec apha(i,t)= beta0(i)+beta1(i)*PIB_evol(t)+beta2*Ratio_IPC(t)
# ce modele rend compte de l'arbitrage du consommateur entre le prix des voitures neuves et celles d'occasion
# et de l'influence du context economique (PIB)
res3= lm(IO1t_cjo[35:233]~
(PIB_evol[35:233]+Ratio_IPC[35:233])*(IN_mat[22:220,1]
+IN_mat[22:220,2]
+IN_mat[22:220,3]
+IN_mat[22:220,4]
+IN_mat[22:220,5]
+IN_mat[22:220,6]
+IN_mat[22:220,7]
+IN_mat[22:220,8]
+IN_mat[22:220,9]
+IN_mat[22:220,10]
+IN_mat[22:220,11]
+IN_mat[22:220,12]-1))
summary(res3)
plot(res3)
coefficients(res3)
anova(res3)
# le probleme d'overfit et le fait que les elasticites des consommateurs sont constantes dans le temps nous amene a considerer un nouveau modele
# de plus il n'est pas certain que le modèle estimé soit bient celui que l'on souhaite étudier
# nouveau modele :
# Regression de : IO1_cjo[t]= ( alpha0 + alpha1*PIB_evol(t)+alpha2*Ratio_IPC(t)) * sum(i=1:12)(IN_cjo[t-i])
# Creation du vecteur IN_moy, contenant la moyenne mobile des IN.
M = matrix(1,12,1)
IN_moy = IN_mat%*%M
# Déclaration des vars
PIB_evol_IN_moy = PIB_evol[35:233]*IN_moy[22:220]
Ratio_IPC_IN_moy = Ratio_IPC[35:233]*IN_moy[22:220]
res4= lm(IO1t_cjo[35:233]~
PIB_evol_IN_moy + Ratio_IPC_IN_moy + IN_moy[22:220] - 1)
summary(res4)
plot(res4)
coefficients(res4)
anova(res4)
# le signe du coeff devant IN_moy est anormal.
# Modele sans la croissance
res5= lm(IO1t_cjo[35:233]~
Ratio_IPC_IN_moy + IN_moy[22:220] - 1)
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
# Une fois de plus le coefficiant négatif devant IN_moy est anormal.
# Modele incluant la conso
# Creation des variables de consommation des voitures
conso_VN=mydata$conso_VN
conso_IO1<-c(rep(0,12),mydata$conso_VN[1:225])
print(conso_IO1)
# conso_IO14 : comment determiner quelle annee de consommation VN il faut considerer... ?
# conso_IO4 : meme probleme !
# Creation des indices de consommation
ratio_conso <- conso_IO1/conso_VN[1:237] # N'a de sens (bien-entendu) qu'a partir de 1996
# Modele avec IPC et Conso
# declaration des variables
ratio_conso_IN_moy = ratio_conso[35:233]*IN_moy[22:220]
# modele : IO1_cjo[t]= ( alpha0 + alpha1*ratio_conso(t)+alpha2*Ratio_IPC(t)) * sum(i=1:12)(IN_cjo[t-i])
res5= lm(IO1t_cjo[35:233]~
ratio_conso_IN_moy + Ratio_IPC_IN_moy + IN_moy[22:220] - 1)
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
# On a enfin un coeff devant IN_moy qui est cohérent
# Les autres restent à analyser
# faire avec IO14 pour capter l'effet de l'inovation technologique
# vérifier que ce n'est pas juste l'effet du prix de l'essence
# mensualiser avec le prix de l'essence du mois
rm(list=ls())
rm(list=ls())
rm(list=ls())
rm(list=ls())
setwd("~/GitHub/R-ASP/R ASP")
library(tseries)
source("desaisonnalisation.r")
source("basic_functions.R")
Ratio_IPC=mydata$Ratio_IPC # Ratio_IPC = IPC_VO / IPC_VN
PIB_evol=mydata$PIB_evol
carbu=mydata$IPC_carbu
conso_VN=mydata$conso_VN
conso_IO1<-c(rep(0,12),mydata$conso_VN[1:225])
ratio_conso <- conso_IO1/conso_VN[1:237]
IN_mat = create_mat(IN_cjo)
M = matrix(1,12,1)
IN_moy = IN_mat%*%M
ratio_conso_IN_moy = ratio_conso[35:237]*IN_moy[23:225]
PIB_evol_IN_moy = PIB_evol[35:237]*IN_moy[23:225]
Ratio_IPC_IN_moy = Ratio_IPC[35:237]*IN_moy[23:225]
carbu_IN_moy = carbu[35:237]*IN_moy[23:225]
carbu_Ratio_conso_IN_moy = carbu[35:237]*ratio_conso_IN_moy[1:203]
######## declaration des variables différentiées
IN_lag=IN_cjo[2:237]-IN_cjo[1:236]
IO1_lag=IO1_cjo[2:225]-IO1_cjo[1:224]
IN_mat_lag = create_mat(IN_lag)
IN_moy_lag = IN_mat_lag%*%M
INreg_lag=IN[1:237]-INreg_cjo[2:228]
INreg_lag=INreg_cjo[2:228]-INreg_cjo[1:227]
IO1reg_lag=IO1reg_cjo[10:219]-IO1reg_cjo[7:216]
Ratio_IPC_lag = Ratio_IPC[36:237]-Ratio_IPC[35:236]
carbu_IN_moy_lag=carbu_IN_moy[2:202]-carbu_IN_moy[1:201]
plot(carbu_IN_moy_lag)
PP.test(carbu_IN_moy_lag[1:201])
(IO1reg_cjo[7:210])
kpss.test(carbu_IN_moy_lag[1:201])
Ratio_IPC_IN_moy_lag=Ratio_IPC_IN_moy[2:202]-Ratio_IPC_IN_moy[1:201]
plot(Ratio_IPC_IN_moy_lag)
PP.test(Ratio_IPC_IN_moy_lag)
kpss.test(Ratio_IPC_IN_moy_lag)
plot(IN)
kpss.test(IN)
PP.test(IN)
PP.test(M)
A=rep(0,12)
PP.test(A)
A=rep(1,12)
plot(A)
A[12]=2
A[1]=0
PP.test(A)
A[1]=1
PP.test(A)
A[12]=1
PP.test(A)
A[12]=1.1
A[1]=1.01
PP.test(A)
kpss.test(A)
adf.test(A)
res8= lm(IO1_lag[23:124]~
carbu_IN_moy_lag[1:102] +
#           carbu_Ratio_conso_IN_moy[1:197] +
#           ratio_conso_IN_moy_lag[1:197] +
Ratio_IPC_IN_moy_lag[1:102] +
IN_moy_lag[24:125] - 1)
summary(res8)
plot(IO1t_cjo)
plot(fitted(res8))
plot(IO1_lag)
par(new=T)
plot(fitted(res8))
IN_moy = create_mat(IN_cjo)%*%M
log_IN_moy = log(create_mat(IN_cjo)%*%M)
print(log_IN_moy)
plot(log_IN_moy)
log_IO1t = log(IO1t_cjo)
plot(log_IO1t)
plot(log_carbu)
log_carbu=log(carbu)
plot(log_carbu)
plot(carbu)
plot(log_carbu)
print(log_IN_moy)
print(log_IO1t)
print(carbu)
print(Ratio_IPC)
print(ratio_conso)
log_carbu_ratio_conso_ratio_IPC =log(ratio_conso [35:237]+carbu[35:237]+Ratio_IPC[35:237])
plot(log_carbu_ratio_conso_ratio_IPC)
print(log_IN_moy)
print(log_carbu_ratio_conso_ratio_IPC)
print(log_IO1t)
res9= lm(log_IO1t[35:231]~ log_carbu_ratio_conso_ratio_IPC[1:197] + log_IN_moy[23:219])
summary(res9)
plot(res9)
coefficients(res9)
plot(log_IO1t[35:231])
par(new=T)
plot(fitted(res9))
D=c(rep(1,161),rep(0,20),rep(1,130))
D=c(rep(1,161),rep(0,26),rep(1,50))
print(D)
plot(D[6:231]*IO1t)
plot(D[6:231]*IO1t_cjo)
plot(D[7:231]*IO1t_cjo)
D=c(rep(1,155),rep(0,32),rep(1,50))
plot(D[7:231]*IO1t_cjo)
plot(D[7:231]*IO1t_cjo[7:231])
par(new=T)
plot(log_IO1t[7:231])
plot(IO1t[7:231])
plot(IO1t_cjo[7:231])
plot(D[7:231]*IO1t_cjo[7:231])
par(new=T)
plot(IO1t_cjo[7:231])
plot(IO1t_cjo[7:231])
par(new=T)
plot(D[7:231]*IO1t_cjo[7:231])
D=c(rep(1,158),rep(0,23),rep(1,56))
print(D)
plot(D[7:231]*IO1t_cjo[7:231])
par(new=T)
plot(IO1t_cjo[7:231])
log_IN_moy_D = log_IN_moy[23:219]*D[35:231]
log_IO1t_D = log_IO1t[35:231]*D[35:231]
log_carbu_ratio_conso_ratio_IPC_D = log_carbu_ratio_conso_ratio_IPC[1:197]*D[35:231]
res9b= lm(log_IO1t_D~ log_carbu_ratio_conso_ratio_IPC_D + log_IN_moy_D)
summary(res9b)
plot(res9b)
plot(log_IO1t[35:231])
par(new=T)
plot(fitted(res9b))
plot(log_IO1t_D[35:231])
par(new=T)
plot(fitted(res9b))
# avec interférence de la prime à la casse
res9= lm(log_IO1t[35:231]~ log_carbu_ratio_conso_ratio_IPC[1:197] + log_IN_moy[23:219])
summary(res9)
plot(res9)
plot(fitted(res9))
plot(fitted(res9))
plot(log_IO1t[35:231])
log_IN_moy_D = c(log_IN_moy[23:219],log_IN_moy[23:219])
print(log_IN_moy_D)
log_IN_moy_D = c(log_IN_moy[23:146],log_IN_moy[169:219])
print(log_IN_moy_D)
log_carbu_ratio_conso_ratio_IPC_D = c(log_carbu_ratio_conso_ratio_IPC[1:124],log_carbu_ratio_conso_ratio_IPC[147:197])
res9b= lm(log_IO1t_D~ log_carbu_ratio_conso_ratio_IPC_D + log_IN_moy_D)
log_IN_moy_D = c(log_IN_moy[23:146],log_IN_moy[169:219])
log_IO1t_D = c(log_IO1t[35:158],log_IO1t[181:231])
log_carbu_ratio_conso_ratio_IPC_D = c(log_carbu_ratio_conso_ratio_IPC[1:124],log_carbu_ratio_conso_ratio_IPC[147:197])
res9b= lm(log_IO1t_D~ log_carbu_ratio_conso_ratio_IPC_D + log_IN_moy_D)
summary(res9b)
plot(log_IO1t_D)
par(new=T)
plot(fitted(res9b))
plot(log_IO1t_D)
log_IN_moy_D = c(log_IN_moy[23:134],log_IN_moy[169:219])
log_IO1t_D = c(log_IO1t[35:146],log_IO1t[181:231])
log_carbu_ratio_conso_ratio_IPC_D = c(log_carbu_ratio_conso_ratio_IPC[1:112],log_carbu_ratio_conso_ratio_IPC[147:197])
res9b= lm(log_IO1t_D~ log_carbu_ratio_conso_ratio_IPC_D + log_IN_moy_D)
summary(res9b)
plot(log_IO1t_D)
par(new=T)
plot(fitted(res9b))
par(new = TRUE)
plot(fitted(res9b), log_IO1t_D, type = "l", axes = TRUE, bty = "n", xlab = "", ylab = "")
res9b= lm(log_IO1t_D~ log_carbu_ratio_conso_ratio_IPC_D + log_IN_moy_D)
par(new = TRUE)
plot(fitted(res9b), log_IO1t_D, type = "l", axes = TRUE, bty = "n", xlab = "", ylab = "")
plot(fitted(res9b), log_IO1t_D, axes = TRUE)
axis(side=4, at = pretty(range(z)))
plot(fitted(res9b))
res9b= lm(log_IO1t_D~ log_carbu_ratio_conso_ratio_IPC_D + log_IN_moy_D)
summary(res9b)
plot(fitted(res9b))
plot(log_IO1t_D)
par(new = TRUE)
plot(fitted(res9b), log_IO1t_D, axes = TRUE)
plot(fitted(res9b)[1:100], log_IO1t_D[1:100], axes = TRUE)
par(new = TRUE)
plot(fitted(res9b)[1:100], log_IO1t_D[1:100], axes = TRUE)
plot(fitted(res9b)[1:100], log_IO1t_D[1:100], axes = FALSE)
cor(PIB,Ratio_IPC)
cor(Carbu,Ratio_IPC)
cor(carbu,Ratio_IPC)
cor(carbu[34:237],Ratio_IPC[1:203])
cor(carbu[35:237],Ratio_IPC[1:203])
