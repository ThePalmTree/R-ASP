summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
IO1d_cutdecomp<-decompose(IO1d_cutts)
IO1d_cutdecomp_trend<-IO1d_cutdecomp$trend
IN_moydecomp<-decompose(IN_moyts)
IN_moydecomp_trend<-IN_moydecomp$trend
res5= lm(IO1d_cutdecomp_trend~
(PIB_evol[36:237]+Ratio_IPC[36:237])*(IN_moydecomp_trend[24:225]))
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
res5= lm(IO1d_cutdecomp_trend~
(Ratio_IPC[36:237])*(IN_moydecomp_trend[24:225]))
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
IO1dts<-ts(IO1d, start=c(1996, 1), end=c(2014, 9), frequency=12)
IN_moyts<-ts(IN_moy, start=c(1995, 1), end=c(2014, 9), frequency=12)
IO1d_decomp<-decompose(IO1dts)
IO1d_decomp_trend<-IO1d_decomp$trend
IN_moydecomp<-decompose(IN_moyts)
IN_moydecomp_trend<-IN_moydecomp$trend
res5= lm(IO1d_decomp_trend[36:237]~
(Ratio_IPC[36:237])*(IN_moydecomp_trend[24:225]))
summary(res5)
plot(res5)
summary(res5)
plot(res5)
summary(res5)
plot(res5)
# Ce fichier contient les fonctions générales utilisées dans les differents modeles
# MATRICE DE REGRESSION
# creation d'une matrice dont les colonnes sont le vecteur entre en imput decale de l'indice de colonne
create_mat = function(var) {
m = matrix(c(rep(c(rep(0,237)),12)),nrow=237,byrow=TRUE)
for (j in 1:12) {
for(i in (j+1):237)
m[i,j]=var[i-j]
}
res = m[13:237,1:12] # on supprime les mois ou l'on a pas toutes les donnees à cause du decallage
return(res)
}
# Ce fichier se charge d'importer les données utilisées à partir d'un fichier excel
# veuillez installer le package xlsx, et activer les packages rJava, xlsxjars et xlsx dans cet ordre pour pouvoir importer les fichiers xlsx
library(rJava,xlsxjars)
library(xlsx)
# importation du fichier xls
path = getwd()
mydata = read.xlsx("C:/Users/Loïc/Documents/GitHub/R-ASP/R ASP/donnees_mensuelles.xlsx",1)  # read from first sheet
# Ce fichier se charge de la désaisonalisation des séries
source("import_files.r")
# CREATION DES OBJETS TIMESERIES
require(graphics)
INts<-ts(mydata$IN, start=c(1995, 1), end=c(2014, 9), frequency=12)
IO1 = mydata$IO1[13:237]
IO1ts<-ts(IO1, start=c(1996, 1), end=c(2014, 9), frequency=12)
# REPRESENTATION DECOMPOSITION
plot(stl(INts,"per"))
# DECOMPOSITION EFFECTIVE
# Méthode multiplicative et additive
IN_decomp_add<-decompose(INts, type="additive")
IN_decomp_mult<-decompose(INts, type="multiplicative")
plot(IN_decomp_add)
plot(IN_decomp_mult)
# Le choix de la meilleure désaisonalisation est encore en débat, pour l'heure les deux sont conservées
# Le plot des différentes décomposition ne permet pas de conclure facilement
IO1_decomp_add<-decompose(IO1ts, type="additive")
IO1_decomp_mult<-decompose(IO1ts, type="multiplicative")
plot(IO1_decomp_add)
plot(IO1_decomp_mult)
# Création des variables désaisonnalisées
INt = IN_decomp_mult$trend
INs = IN_decomp_mult$seasonal
IO1t = IO1_decomp_mult$trend
IO1s = IO1_decomp_mult$seasonal
# Une fois la desaisonnalisation faite, il faut multiplier par les CJO
INt_cjo = INt/mydata$X.CJO_5J[1:237]
INs_cjo = INs/mydata$X.CJO_5J[1:237]
IO1t_cjo = IO1t/mydata$X.CJO_5J[13:237]
IO1s_cjo = IO1s/mydata$X.CJO_5J[13:237]
# Modele avec IPC et Conso
# Nettoyage de l'environement de travail
rm(list=ls())
#Importation des fichiers R nécéssaires
source("desaisonnalisation.r")
source("basic_functions.R")
# declaration des variables
Ratio_IPC=mydata$Ratio_IPC # Ratio_IPC = IPC_VO / IPC_VN
PIB_evol=mydata$PIB_evol
# creation de l a matrice de regression
IN_mat = create_mat(INt_cjo)
# IPCVN et IPCVO designent les indices de Prix a la consommation de l'INSEE : Indice Prix a la consommation Voiture Neuve/Occasion
# Plus d'information concernant ces indices et leur construction dans le pdf de methodologie de l'INSEE joint au dossier Git
# Le coefficient CJO_5J pondere en fonction du nombre de jours ouvres
# Regression de : IO1_cjo[t]= sum(i=1:12)( alpha(i)*IN_cjo[t-i]  )
# avec apha(i,t)= beta0(i)+beta1(i)*PIB_evol(t)+beta2*Ratio_IPC(t)
# ce modele rend compte de l'arbitrage du consommateur entre le prix des voitures neuves et celles d'occasion
# et de l'influence du context economique (PIB)
res3= lm(IO1t_cjo[35:233]~
(PIB_evol[35:233]+Ratio_IPC[35:233])*(IN_mat[22:220,1]
+IN_mat[22:220,2]
+IN_mat[22:220,3]
+IN_mat[22:220,4]
+IN_mat[22:220,5]
+IN_mat[22:220,6]
+IN_mat[22:220,7]
+IN_mat[22:220,8]
+IN_mat[22:220,9]
+IN_mat[22:220,10]
+IN_mat[22:220,11]
+IN_mat[22:220,12]-1))
summary(res3)
plot(res3)
coefficients(res3)
anova(res3)
# le probleme d'overfit et le fait que les elasticites des consommateurs sont constantes dans le temps nous amene a considerer un nouveau modele
# de plus il n'est pas certain que le modèle estimé soit bient celui que l'on souhaite étudier
# nouveau modele :
# Regression de : IO1_cjo[t]= ( alpha0 + alpha1*PIB_evol(t)+alpha2*Ratio_IPC(t)) * sum(i=1:12)(IN_cjo[t-i])
# Creation du vecteur IN_moy, contenant la moyenne mobile des IN.
M = matrix(1,12,1)
IN_moy = IN_mat%*%M
# Déclaration des vars
PIB_evol_IN_moy = PIB_evol[35:233]*IN_moy[22:220]
Ratio_IPC_IN_moy = Ratio_IPC[35:233]*IN_moy[22:220]
res4= lm(IO1t_cjo[35:233]~
PIB_evol_IN_moy + Ratio_IPC_IN_moy + IN_moy[22:220] - 1)
summary(res4)
plot(res4)
coefficients(res4)
anova(res4)
# le signe du coeff devant IN_moy est anormal.
# Modele sans la croissance
res5= lm(IO1t_cjo[35:233]~
Ratio_IPC_IN_moy + IN_moy[22:220] - 1)
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
# Une fois de plus le coefficiant négatif devant IN_moy est anormal.
# Modele incluant la conso
# Creation des variables de consommation des voitures
conso_VN=mydata$conso_VN
conso_IO1<-c(rep(0,12),mydata$conso_VN[1:225])
print(conso_IO1)
# conso_IO14 : comment determiner quelle annee de consommation VN il faut considerer... ?
# conso_IO4 : meme probleme !
# Creation des indices de consommation
ratio_conso <- conso_IO1/conso_VN[1:237] # N'a de sens (bien-entendu) qu'a partir de 1996
# Modele avec IPC et Conso
# declaration des variables
ratio_conso_IN_moy = ratio_conso[35:233]*IN_moy[22:220]
# modele : IO1_cjo[t]= ( alpha0 + alpha1*ratio_conso(t)+alpha2*Ratio_IPC(t)) * sum(i=1:12)(IN_cjo[t-i])
res5= lm(IO1t_cjo[35:233]~
ratio_conso_IN_moy + Ratio_IPC_IN_moy + IN_moy[22:220] - 1)
summary(res5)
plot(res5)
coefficients(res5)
anova(res5)
# On a enfin un coeff devant IN_moy qui est cohérent
# Les autres restent à analyser
# faire avec IO14 pour capter l'effet de l'inovation technologique
# vérifier que ce n'est pas juste l'effet du prix de l'essence
# mensualiser avec le prix de l'essence du mois
# Nettoyage de l'environement de travail
rm(list=ls())
setwd("~/GitHub/R-ASP/R ASP")
source("desaisonnalisation.r")
source("basic_functions.R")
Ratio_IPC=mydata$Ratio_IPC # Ratio_IPC = IPC_VO / IPC_VN
PIB_evol=mydata$PIB_evol
IN_mat = create_mat(INt_cjo)
res3= lm(IO1t_cjo[35:233]~
(PIB_evol[35:233]+Ratio_IPC[35:233])*(IN_mat[22:220,1]
+IN_mat[22:220,2]
+IN_mat[22:220,3]
+IN_mat[22:220,4]
+IN_mat[22:220,5]
+IN_mat[22:220,6]
+IN_mat[22:220,7]
+IN_mat[22:220,8]
+IN_mat[22:220,9]
+IN_mat[22:220,10]
+IN_mat[22:220,11]
+IN_mat[22:220,12]-1))
summary(res3)
plot(res3)
#IN_moy démarre à la date 13 et termine à la date 237
#ses 6 premières et 6 dernières valeurs sont N.A
# Déclaration des vars
PIB_evol_IN_moy = PIB_evol[35:237]*IN_moy[23:225]
Ratio_IPC_IN_moy = Ratio_IPC[35:237]*IN_moy[23:225]
M = matrix(1,12,1)
IN_moy = IN_mat%*%M
PIB_evol_IN_moy = PIB_evol[35:237]*IN_moy[23:225]
Ratio_IPC_IN_moy = Ratio_IPC[35:237]*IN_moy[23:225]
res4= lm(IO1t_cjo[23:219]~
PIB_evol_IN_moy[1:197] + Ratio_IPC_IN_moy[1:197] + IN_moy[23:219] - 1)
# on fait commencer IO1t_cjo à 23 (ie à la date 35) et terminer à 219 (ie date 231) pour supprimer les N.A
# on
summary(res4)
plot(res4)
Ratio_IPC_IN_moy[1:197] + IN_moy[23:219] - 1)
res5= lm(IO1t_cjo[23:219]~
Ratio_IPC_IN_moy[1:197] + IN_moy[23:219] - 1)
plot(IO1t_cjo)
par(new=T)
plot(fitted(res5))
summary(res5)
plot(res5)
print(conso_IO1)
conso_VN=mydata$conso_VN
conso_IO1<-c(rep(0,12),mydata$conso_VN[1:225])
print(conso_IO1)
# conso_IO14 : comment d
ratio_conso <- conso_IO1/conso_VN[1:237] # N'a de sens (bien-entendu) qu'a partir de 1996
# début date 1 fin date 237
ratio_conso_IN_moy = ratio_conso[35:237]*IN_moy[23:225]
res6= lm(IO1t_cjo[35:231]~
ratio_conso_IN_moy[1:197] + Ratio_IPC_IN_moy[1:197] + IN_moy[23:219] - 1)
summary(res6)
plot(res6)
plot(fitted(res6))
carbu=mydata$IPC_carbu
carbu_IN_moy = carbu[35:237]*IN_moy[23:225]
carbu_Ratio_conso_IN_moy = carbu[35:237]*ratio_conso_IN_moy[1:203]
res7= lm(IO1t_cjo[35:231]~
carbu_IN_moy[1:197] +
carbu_Ratio_conso_IN_moy[1:197] +
ratio_conso_IN_moy[1:197] +
Ratio_IPC_IN_moy[1:197] +
IN_moy[23:219] - 1)
summary(res7)
plot(res7)
plot(fitted(res7))
par(new=T)
plot(IO1t_cjo)
plot(IO1t_cjo)
par(new=T)
plot(fitted(res7))
INt_cjo = IN_decomp_mult$trend
INs_cjo = IN_decomp_mult$seasonal
INr_cjo = IN_decomp_mult$random
INreg_cjo = INt_cjo+INr_cjo
IO1t_cjo = IO1_decomp_mult$trend
IO1s_cjo = IO1_decomp_mult$seasonal
IO1r_cjo = IO1_decomp_mult$random
IO1reg_cjo = IO1t_cjo + IO1r_cjo
IN_mat = create_mat(INreg_cjo)
M = matrix(1,12,1)
IN_moy = IN_mat%*%M
res7= lm(IO1reg_cjo[35:231]~
carbu_IN_moy[1:197] +
carbu_Ratio_conso_IN_moy[1:197] +
ratio_conso_IN_moy[1:197] +
Ratio_IPC_IN_moy[1:197] +
IN_moy[23:219] - 1)
summary(res7)
PP.test(IO1r_cjo)
PP.test(INr_cjo)
IO1_decomp_mult
PP.test(IO1_decomp_mult)
PP.test(IO1_decomp_mult$random)
IO1_decomp_mult$random
IO1reg_cjo
is.na(IO1reg_cjo)
testb=is.na(IO1reg_cjo)
testb
IO1reg_cjo[!b]
IO1reg_cjo[[!b]
]
IO1reg_cjo[6:210]
IO1reg_cjo[7:210]
PP.test(IO1reg_cjo[7:210])
PP.test(IO1r_cjo[7:210])
PP.test(IN_cjo[7:210])
PP.test(IO1t_cjo[7:210])
PP.test(INreg_cjo[7:210])
res7= lm(IO1reg_cjo[35:131]~
carbu_IN_moy[1:97] +
carbu_Ratio_conso_IN_moy[1:97] +
ratio_conso_IN_moy[1:97] +
Ratio_IPC_IN_moy[1:97] +
IN_moy[23:119] - 1)
summary(res7)
A=-0.014400*carbu_IN_moy+0.014167*carbu_Ratio_conso_IN_moy-1.633273*ratio_conso_IN_moy-0.034510*Ratio_IPC_IN_moy+1.710943*IN_moy
A=-0.014400*carbu_IN_moy[1:197]+0.014167*carbu_Ratio_conso_IN_moy[1:197]-1.633273*ratio_conso_IN_moy[1:197]-0.034510*Ratio_IPC_IN_moy[1:197]+1.710943*IN_moy[23:219]
plot(IO1t_cjo)
par(new=T)
plot(A)
ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=2,spec="longrun")
install.packages("urca")
package(urca)
library("urca", lib.loc="~/R/win-library/3.1")
ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=2,spec="longrun")
ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=2,spec="longrun")
ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=12,spec="longrun")
ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=2,spec="longrun")
kpss.test(IO1reg_cjo)
install.packages("tseries")
library("tseries", lib.loc="~/R/win-library/3.1")
kpss.test(IO1reg_cjo)
adf.test(IO1reg_cjo)
adf.test(IO1reg_cjo[7:210])
summary(ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=2,spec="longrun"))
summary(ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="trend",K=2,spec="longrun"))
summary(ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet=c("const", "trend",K=2,spec="longrun"))
0
summary(ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=2,spec="longrun"))
summary(ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="none",K=2,spec="longrun"))
summary(ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=2,spec="longrun"))
anova(ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=2,spec="longrun"))
# un test KPSS confirme la non stationnarité (pvalue<0.01)
jonansen=ca.jo(cbind(IO1reg_cjo,INreg_cjo),type="trace",ecdet="const",K=2,spec="longrun")
print(johansen$p.value)
print(jonansen$p.value)
adf.test(IO1reg_cjo[7:210])
adf.test(cbind(IO1reg_cjo[7:210],INreg_cjo[7:210])
adf.test(cbind(IO1reg_cjo[7:210],INreg_cjo[7:210]))
adf.test(cbind(IO1reg_cjo[7:210]-INreg_cjo[7:210]))
regression = lm(IO1reg_cjo[7:210] ~ INreg_cjo[7:210] -1)
summary(regression)
beta = coef(regression)[1]
adf.test(cbind(IO1reg_cjo[7:210]-beta*INreg_cjo[7:210]))
IN_mat = create_mat(INt_cjo)
IN_mat_reg = create_mat(INreg_cjo)
IN_mat = create_mat(INt_cjo)
IN_mat_reg = create_mat(INreg_cjo)
IN_moy = IN_mat%*%M
IN_moy_reg = IN_mat_reg%*%M
cor(ratio_conso_IN_moy[1:197],Ratio_IPC_IN_moy[1:197])
cor(ratio_conso[1:197],Ratio_IPC[1:197])
cor(ratio_conso[1:197],Ratio_IPC[1:197],IN_moy[23:219])
install.packages("corrplot")
library("corrplot", lib.loc="~/R/win-library/3.1")
View(mydata)
mydata2= c(carbu_IN_moy[1:197])
rquery.cormat(mydata2)
mydata2= cbind(carbu_IN_moy[1:197])
mydata2 <- cbind(IO1reg_cjo[35:231],
carbu_IN_moy[1:197],
carbu[35,233],
carbu_Ratio_conso_IN_moy[1:197],
ratio_conso[35,233],
ratio_conso_IN_moy[1:197],
Ratio_IPC[35,233],
Ratio_IPC_IN_moy[1:197],
IN_moy[23:219])
mydata2 <- cbind(IO1reg_cjo[35:231],
carbu_IN_moy[1:197],
carbu[35,231],
carbu_Ratio_conso_IN_moy[1:197],
ratio_conso[35,231],
ratio_conso_IN_moy[1:197],
Ratio_IPC[35,231],
Ratio_IPC_IN_moy[1:197],
IN_moy[23:219])
print(carbu)
mydata2 <- cbind(IO1reg_cjo[35:231],
carbu_IN_moy[1:197],
carbu[35,231],
carbu_Ratio_conso_IN_moy[1:197],
ratio_conso[35,231],
ratio_conso_IN_moy[1:197],
Ratio_IPC[35,231],
Ratio_IPC_IN_moy[1:197],
IN_moy[23:219])
mydata2 <- cbind(IO1reg_cjo[35:231],
carbu_IN_moy[1:197],
carbu[35:231],
carbu_Ratio_conso_IN_moy[1:197],
ratio_conso[35:231],
ratio_conso_IN_moy[1:197],
Ratio_IPC[35:231],
Ratio_IPC_IN_moy[1:197],
IN_moy[23:219])
print(mydata2)
print(IO1reg_cjo)
mydata2 <- cbind(IO1reg_cjo[23:219],
carbu_IN_moy[1:197],
carbu[35:231],
carbu_Ratio_conso_IN_moy[1:197],
ratio_conso[35:231],
ratio_conso_IN_moy[1:197],
Ratio_IPC[35:231],
Ratio_IPC_IN_moy[1:197],
IN_moy[23:219])
print(mydata2)
rquery.cormat(mydata2)
source("http://www.sthda.com/upload/rquery_cormat.r")
rquery.cormat(mydata2)
mydata2 <- cbind(IO1reg_cjo[23:219],
carbu[35:231],
ratio_conso[35:231],
carbu_IN_moy[1:197],
Ratio_IPC[35:231],
carbu_Ratio_conso_IN_moy[1:197],
ratio_conso_IN_moy[1:197],
Ratio_IPC_IN_moy[1:197],
IN_moy[23:219])
rquery.cormat(mydata2)
plot(carbu)
plot(ratio_conso)
plot(ratio_conso[35:237])
res=lm(carbu[35:231]~ratio_conso[35:237])
res=lm(carbu[35:231]~ratio_conso[35:231])
summary(res)
carbu_ratio_conso=carbu*ratio_conso
carbu_ratio_conso=carbu[35:237]*ratio_conso[35:237]
IN_mat = create_mat(INreg_cjo)
M = matrix(1,12,1)
IN_moy = IN_mat%*%M
mydata2 <- cbind(IO1reg_cjo[23:219],
Ratio_IPC[35:231],
carbu[35:231],
ratio_conso[35:231],
carbu_ratio_conso[1:197],
#                carbu_IN_moy[1:197],
#                carbu_Ratio_conso_IN_moy[1:197],
#                ratio_conso_IN_moy[1:197],
#                Ratio_IPC_IN_moy[1:197],
IN_moy[23:219])
rquery.cormat(mydata2)
cor(carbu[35:231],Ratio_IPC[35:231])
cor(IO1reg_cjo[23:219],ratio_conso[35:231])
cor(carbu[35:231],Ratio_IPC[35:231])
cor(carbu[35:231],ratio_conso[35:231])
cor(carbu[35:231],carbu_ratio_conso[1:197])
cor(Ratio_IPC[35:231],carbu[35:231])
cor(Ratio_IPC[35:231],ratio_conso[35:231])
cor(Ratio_IPC[35:231],carbu_ratio_conso[1:197])
cor(ratio_conso[35:231],carbu_ratio_conso[1:197])
plot(Ratio_IPC[35:231])
plot(carbu[35:231])
print(INreg_cjo)
source('~/GitHub/R-ASP/R ASP/ipc_conso_models.R')
INreg_lag=INreg_cjo[23,219]-INreg_cjo[22,218]
# Etude de la série différentiée
INreg_lag=INreg_cjo[23:219]-INreg_cjo[22:218]
IO1reg_lag=IO1reg_cjo[23:219]-IO1reg_cjo[22:218]
print(INreg_cjo)
print(IO1reg_cjo)
INreg_lag=INreg_cjo[8:237]-INreg_cjo[7:236]
INreg_lag=INreg_cjo[8:231]-INreg_cjo[7:230]
IO1reg_lag=IO1reg_cjo[8:219]-IO1reg_cjo[7:218]
plot(INreg_cjo)
plot(IO1reg_cjo)
plot(INmoy)
plot(IN_moy)
plot(INreg_cjo)
plot(IN_moy)
plot(INreg_lag)
IN_mat_lag = create_mat(INreg_lag)
IN_moy_lag = IN_mat_lag<%*%M
IN_moy_lag = IN_mat_lag%*%M
plot(IN_moy_lag)
PP.test(INmoy_lag)
PP.test(IN_moy_lag)
print(IN_moy_lag)
print(IN_moy_lag[1,213])
print(IN_moy_lag[1:213])
print(IN_moy_lag[1:214])
PP.test(IN_moy_lag[1:213])
PP.test(IO1reg_cjo[7:210])
kpss.test(IN_moy_lag[1:213])
kpss.test(IO1reg_cjo[7:210])
INreg_lag=INreg_cjo[9:231]-INreg_cjo[7:229]
print(IN_moy_lag[1:213])
IN_mat_lag = create_mat(INreg_lag)
IN_moy_lag = IN_mat_lag%*%M
print(IN_moy_lag[1:213])
PP.test(IN_moy_lag[1:212])
kpss.test(IN_moy_lag[1:212])
INreg_lag=INreg_cjo[10:231]-INreg_cjo[7:228]
IN_mat_lag = create_mat(INreg_lag)
IN_moy_lag = IN_mat_lag%*%M
PP.test(IN_moy_lag[1:211])
kpss.test(IN_moy_lag[1:211])
print(IN_moy_lag[1:211])
plot(IN_moy_lag)
IO1reg_lag=IO1reg_cjo[8:219]-IO1reg_cjo[7:218]
plot(IO1reg_cjo)
print(IO1reg_lag[1:211])
print(IO1reg_lag[1:212])
print(IO1reg_lag[1:213])
IO1reg_lag=IO1reg_cjo[8:219]-IO1reg_cjo[7:218]
PP.test(IO1reg_lag[1:212])
kpss.test(IO1reg_lag[1:212])
IO1reg_lag=IO1reg_cjo[9:219]-IO1reg_cjo[7:217]
PP.test(IO1reg_lag[1:211])
kpss.test(IO1reg_lag[1:211])
IO1reg_lag=IO1reg_cjo[9:219]-IO1reg_cjo[7:217]
IO1reg_lag=IO1reg_cjo[10:219]-IO1reg_cjo[7:216]
IO1reg_lag=IO1reg_cjo[10:219]-IO1reg_cjo[7:216]
PP.test(IO1reg_lag[1:210])
kpss.test(IO1reg_lag[1:210])
regression = lm(IO1reg_lag[10:216] ~ INreg_lag[22:228] -1)
beta = coef(regression)[1]
adf.test(cbind(IO1reg_lag[10:216]-beta*INreg_lag[22:228]))
regression = lm(IO1reg_lag[10:216] ~ IN_moy_lag[22:228] -1)
beta = coef(regression)[1]
adf.test(cbind(IO1reg_lag[10:216]-beta*IN_moy_lag[22:228]))
regression = lm(IO1reg_lag[10:216] ~ IN_moy_lag[22:228] -1)
beta = coef(regression)[1]
adf.test(cbind(IO1reg_lag[10:216]-beta*IN_moy_lag[22:228]))
regression = lm(IO1reg_lag[1:210] ~ IN_moy_lag[1:210] -1)
beta = coef(regression)[1]
adf.test(cbind(IO1reg_lag[1:210]-beta*IN_moy_lag[1:210]))
